// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RehabilitationSystem.Data;

#nullable disable

namespace RehabilitationSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240621050239_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9cf2591a-1bba-4e4f-8c8a-65a8934886f6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "32c96e9f-e211-44f7-9857-b0fa5ab21fa9",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        },
                        new
                        {
                            Id = "56ed7175-71ad-491e-a823-2fcd613ebadd",
                            Name = "CustomerService",
                            NormalizedName = "CUSTOMERSERVICE"
                        },
                        new
                        {
                            Id = "4525b39f-fa96-409c-8713-3060af5c5c4f",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = "admin1",
                            AppUserId = "user1",
                            Name = "Admin One"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Announcement", b =>
                {
                    b.Property<string>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("AdminId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            AnnouncementId = "announcement1",
                            AdminId = "admin1",
                            Content = "Content of Announcement One",
                            Date = new DateTime(2024, 6, 21, 13, 2, 36, 993, DateTimeKind.Local).AddTicks(4441),
                            Status = true,
                            Title = "Announcement One"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28a57ed8-e1b5-454d-a846-9e581ecb6e12",
                            Email = "admin1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAIAAYagAAAAENaPtaKlvasjBGOSagexVF7YEgAEKUFzuEf/LDzT+7JolU+xUpOGq5Z8yvVBXa+Obg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d44f6838-0d17-4a6c-91e4-97e60ed9be07",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6755df9d-ebce-433b-84d0-efa573da734a",
                            Email = "therapist1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST1@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST1",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDunkbIjtXRopYT8ItvBXU5+iVVM6kbTdhmfKlnaNOuSIhZ+ZsPXb2+bqpixDajrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa9f612f-3796-45a2-bf46-7062c1f69dae",
                            TwoFactorEnabled = false,
                            UserName = "therapist1"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "676d77f6-933f-45b4-9419-f5c9f7f770de",
                            Email = "customerService1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMERSERVICE1@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMERSERVICE1",
                            PasswordHash = "AQAAAAIAAYagAAAAEKZTl9GU2XwLuCSiCt+HP+79QW8YvNcf208KNOalK9k2JCA8ryl5mOZOnlQ/Du+gBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75fde260-f476-4378-8463-137b40e3db77",
                            TwoFactorEnabled = false,
                            UserName = "customerService1"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e1f85a6-a8ed-4b43-9733-0978c63ced08",
                            Email = "parent1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARENT1@EXAMPLE.COM",
                            NormalizedUserName = "PARENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEE521VuStGhARCU1sYyO88Wav0Q0i+fTg/9wu6nKvTafZNMf2jupnl7jyDMZpmIwmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "229ebe10-3348-49fa-bc78-bd0c6c85ec83",
                            TwoFactorEnabled = false,
                            UserName = "parent1"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Billing", b =>
                {
                    b.Property<string>("BillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("IssueDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("ProgramId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProgramStudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("TotalPayAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillingId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StudentId");

                    b.ToTable("Billings");

                    b.HasData(
                        new
                        {
                            BillingId = "billing1",
                            IssueDate = new DateTime(2024, 6, 21, 13, 2, 36, 993, DateTimeKind.Local).AddTicks(3491),
                            PaymentStatus = false,
                            ProgramStudentId = "programStudent1",
                            TotalPayAmount = 200.0m
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.BillingItem", b =>
                {
                    b.Property<string>("BillingItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Amount")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("BillingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillingItemId");

                    b.HasIndex("BillingId");

                    b.ToTable("BillingItems");

                    b.HasData(
                        new
                        {
                            BillingItemId = "billingItem1",
                            Amount = 4,
                            BillingId = "billing1",
                            Description = "Billing Item One",
                            Price = 50.0m
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.CustomerService", b =>
                {
                    b.Property<string>("CustomerServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerServiceId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("CustomerServices");

                    b.HasData(
                        new
                        {
                            CustomerServiceId = "customerService1",
                            AppUserId = "user3",
                            Name = "Customer Service One"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Parent", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            ParentId = "parent1",
                            Address = "123 Street",
                            AppUserId = "user4",
                            City = "City",
                            Name = "Parent One",
                            Occupation = "Occupation",
                            Postcode = "12345",
                            State = "State"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Program", b =>
                {
                    b.Property<string>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProgramId");

                    b.ToTable("Programs");

                    b.HasData(
                        new
                        {
                            ProgramId = "program1",
                            Description = "Description One",
                            Name = "Program One",
                            Objective = "Objective One",
                            Price = 100.0m
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ProgramStudent", b =>
                {
                    b.Property<string>("ProgramStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RegisterDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProgramStudentId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StudentId");

                    b.ToTable("ProgramStudents");

                    b.HasData(
                        new
                        {
                            ProgramStudentId = "programStudent1",
                            ProgramId = "program1",
                            RegisterDate = new DateTime(2024, 6, 21, 13, 2, 36, 993, DateTimeKind.Local).AddTicks(2572),
                            StudentId = "student1"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ProgramStudentSlot", b =>
                {
                    b.Property<string>("ProgramStudentSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProgramStudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProgramStudentSlotId");

                    b.HasIndex("ProgramStudentId");

                    b.HasIndex("SlotId");

                    b.ToTable("ProgramStudentSlots");

                    b.HasData(
                        new
                        {
                            ProgramStudentSlotId = "ProgramStudentSlot1",
                            ProgramStudentId = "programStudent1",
                            SlotId = "slot1"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramStudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TherapistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReportId");

                    b.HasIndex("ProgramStudentId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReportId = "report1",
                            Category = 0,
                            Content = "Content of Report One",
                            ProgramStudentId = "programStudent1",
                            TherapistId = "therapist1"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ReportSkillCategory", b =>
                {
                    b.Property<string>("ReportSkillCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportSkillSetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SkillCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReportSkillCategoryId");

                    b.HasIndex("SkillCategoryId");

                    b.HasIndex("ReportSkillSetId", "ReportSkillCategoryId")
                        .IsUnique();

                    b.ToTable("ReportSkillCategories");

                    b.HasData(
                        new
                        {
                            ReportSkillCategoryId = "r11",
                            ReportSkillSetId = "r1",
                            SkillCategoryId = "1.1"
                        },
                        new
                        {
                            ReportSkillCategoryId = "r21",
                            ReportSkillSetId = "r2",
                            SkillCategoryId = "2.1"
                        },
                        new
                        {
                            ReportSkillCategoryId = "r22",
                            ReportSkillSetId = "r2",
                            SkillCategoryId = "2.2"
                        },
                        new
                        {
                            ReportSkillCategoryId = "r23",
                            ReportSkillSetId = "r2",
                            SkillCategoryId = "2.3"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ReportSkillLineItem", b =>
                {
                    b.Property<string>("ReportSkillLineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportSkillCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SkillLineItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("ReportSkillLineItemId");

                    b.HasIndex("SkillLineItemId");

                    b.HasIndex("ReportSkillCategoryId", "ReportSkillLineItemId")
                        .IsUnique();

                    b.ToTable("ReportSkillLineItems");

                    b.HasData(
                        new
                        {
                            ReportSkillLineItemId = "r11a",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r11",
                            SkillLineItemId = "1.1.a",
                            Status = true
                        },
                        new
                        {
                            ReportSkillLineItemId = "r11b",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r11",
                            SkillLineItemId = "1.1.b",
                            Status = true
                        },
                        new
                        {
                            ReportSkillLineItemId = "r11c",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r11",
                            SkillLineItemId = "1.1.c",
                            Status = false
                        },
                        new
                        {
                            ReportSkillLineItemId = "r11d",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r11",
                            SkillLineItemId = "1.1.d",
                            Status = true
                        },
                        new
                        {
                            ReportSkillLineItemId = "r21a",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r21",
                            SkillLineItemId = "2.1.a",
                            Status = true
                        },
                        new
                        {
                            ReportSkillLineItemId = "r21b",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r21",
                            SkillLineItemId = "2.1.b",
                            Status = false
                        },
                        new
                        {
                            ReportSkillLineItemId = "r21c",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r21",
                            SkillLineItemId = "2.1.c",
                            Status = false
                        },
                        new
                        {
                            ReportSkillLineItemId = "r22a",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r22",
                            SkillLineItemId = "2.2.a",
                            Status = true
                        },
                        new
                        {
                            ReportSkillLineItemId = "r22b",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r22",
                            SkillLineItemId = "2.2.b",
                            Status = true
                        },
                        new
                        {
                            ReportSkillLineItemId = "r22c",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r22",
                            SkillLineItemId = "2.2.c",
                            Status = true
                        },
                        new
                        {
                            ReportSkillLineItemId = "r23a",
                            Comment = "Halo",
                            ReportSkillCategoryId = "r23",
                            SkillLineItemId = "2.3.a",
                            Status = false
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ReportSkillSet", b =>
                {
                    b.Property<string>("ReportSkillSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SkillSetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReportSkillSetId");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("ReportId", "SkillSetId")
                        .IsUnique();

                    b.ToTable("ReportSkillSets");

                    b.HasData(
                        new
                        {
                            ReportSkillSetId = "r1",
                            Comment = "Halo world",
                            ReportId = "report1",
                            SkillSetId = "1"
                        },
                        new
                        {
                            ReportSkillSetId = "r2",
                            Comment = "Halo world",
                            ReportId = "report1",
                            SkillSetId = "2"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Session", b =>
                {
                    b.Property<string>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SessionId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            SessionId = "session1",
                            Description = "Description One",
                            Name = "Session One",
                            ProgramId = "program1"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.SkillCategory", b =>
                {
                    b.Property<string>("SkillCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillSetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkillCategoryId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("SkillCategories");

                    b.HasData(
                        new
                        {
                            SkillCategoryId = "1.1",
                            Name = "Observation",
                            SkillSetId = "1"
                        },
                        new
                        {
                            SkillCategoryId = "2.1",
                            Name = "Main",
                            SkillSetId = "2"
                        },
                        new
                        {
                            SkillCategoryId = "2.2",
                            Name = "Gross Motor Function",
                            SkillSetId = "2"
                        },
                        new
                        {
                            SkillCategoryId = "2.3",
                            Name = "Fine Motor Function",
                            SkillSetId = "2"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.SkillLineItem", b =>
                {
                    b.Property<string>("SkillLineItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkillLineItemId");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillLineItems");

                    b.HasData(
                        new
                        {
                            SkillLineItemId = "1.1.a",
                            Name = "Enter: by his/ her self",
                            SkillCategoryId = "1.1"
                        },
                        new
                        {
                            SkillLineItemId = "1.1.b",
                            Name = "With Prompting",
                            SkillCategoryId = "1.1"
                        },
                        new
                        {
                            SkillLineItemId = "1.1.c",
                            Name = "Difficuties separate with parents",
                            SkillCategoryId = "1.1"
                        },
                        new
                        {
                            SkillLineItemId = "1.1.d",
                            Name = "With Crying and Refuse",
                            SkillCategoryId = "1.1"
                        },
                        new
                        {
                            SkillLineItemId = "2.1.a",
                            Name = "Range Of Motion (Upper/ lower/ extrem)",
                            SkillCategoryId = "2.1"
                        },
                        new
                        {
                            SkillLineItemId = "2.1.b",
                            Name = "Muscle Tone",
                            SkillCategoryId = "2.1"
                        },
                        new
                        {
                            SkillLineItemId = "2.1.c",
                            Name = "Muscle Strength",
                            SkillCategoryId = "2.1"
                        },
                        new
                        {
                            SkillLineItemId = "2.2.a",
                            Name = "Standing",
                            SkillCategoryId = "2.2"
                        },
                        new
                        {
                            SkillLineItemId = "2.2.b",
                            Name = "Crawling",
                            SkillCategoryId = "2.2"
                        },
                        new
                        {
                            SkillLineItemId = "2.2.c",
                            Name = "Walking",
                            SkillCategoryId = "2.2"
                        },
                        new
                        {
                            SkillLineItemId = "2.3.a",
                            Name = "Grasp & Release",
                            SkillCategoryId = "2.3"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.SkillSet", b =>
                {
                    b.Property<string>("SkillSetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillSetId");

                    b.ToTable("SkillSets");

                    b.HasData(
                        new
                        {
                            SkillSetId = "1",
                            Description = "",
                            Name = "S-Subjective Assesment"
                        },
                        new
                        {
                            SkillSetId = "2",
                            Description = "O-Objective Assesment",
                            Name = "Motor & Praxis Skills"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Slot", b =>
                {
                    b.Property<string>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("TherapistSessionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SlotId");

                    b.HasIndex("TherapistSessionId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            SlotId = "slot1",
                            EndTime = new DateTime(2024, 6, 21, 15, 2, 36, 993, DateTimeKind.Local).AddTicks(3149),
                            StartTime = new DateTime(2024, 6, 21, 14, 2, 36, 993, DateTimeKind.Local).AddTicks(3134),
                            TherapistSessionId = "therapistSession1"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = "student1",
                            Age = 10,
                            DOB = new DateTime(2014, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "Student One",
                            ParentId = "parent1"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Therapist", b =>
                {
                    b.Property<string>("TherapistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TherapistId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Therapists");

                    b.HasData(
                        new
                        {
                            TherapistId = "therapist1",
                            AppUserId = "user2",
                            Name = "Therapist One"
                        });
                });

            modelBuilder.Entity("RehabilitationSystem.Models.TherapistSession", b =>
                {
                    b.Property<string>("TherapistSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TherapistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TherapistSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TherapistId", "SessionId")
                        .IsUnique();

                    b.ToTable("TherapistSessions");

                    b.HasData(
                        new
                        {
                            TherapistSessionId = "therapistSession1",
                            SessionId = "session1",
                            TherapistId = "therapist1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Admin", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.AppUser", "AppUser")
                        .WithOne("Admin")
                        .HasForeignKey("RehabilitationSystem.Models.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Announcement", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.Admin", "Admin")
                        .WithMany("Announcements")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Billing", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.Program", null)
                        .WithMany("Billings")
                        .HasForeignKey("ProgramId");

                    b.HasOne("RehabilitationSystem.Models.Student", null)
                        .WithMany("Billings")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.BillingItem", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.Billing", "Billing")
                        .WithMany("BillingItems")
                        .HasForeignKey("BillingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.CustomerService", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.AppUser", "AppUser")
                        .WithOne("CustomerService")
                        .HasForeignKey("RehabilitationSystem.Models.CustomerService", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Parent", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.AppUser", "AppUser")
                        .WithOne("Parent")
                        .HasForeignKey("RehabilitationSystem.Models.Parent", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ProgramStudent", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.Program", "Program")
                        .WithMany("ProgramStudents")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.Billing", "Billing")
                        .WithOne("ProgramStudent")
                        .HasForeignKey("RehabilitationSystem.Models.ProgramStudent", "ProgramStudentId")
                        .HasPrincipalKey("RehabilitationSystem.Models.Billing", "ProgramStudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.Student", "Student")
                        .WithMany("ProgramStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Billing");

                    b.Navigation("Program");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ProgramStudentSlot", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.ProgramStudent", "ProgramStudent")
                        .WithMany("ProgramStudentSlots")
                        .HasForeignKey("ProgramStudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.Slot", "Slot")
                        .WithMany("ProgramStudentSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramStudent");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Report", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.ProgramStudent", "ProgramStudent")
                        .WithMany("Reports")
                        .HasForeignKey("ProgramStudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.Therapist", "Therapist")
                        .WithMany("Reports")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProgramStudent");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ReportSkillCategory", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.ReportSkillSet", "ReportSkillSet")
                        .WithMany("ReportSkillCategories")
                        .HasForeignKey("ReportSkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.SkillCategory", "SkillCategory")
                        .WithMany("ReportSkillCategories")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReportSkillSet");

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ReportSkillLineItem", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.ReportSkillCategory", "ReportSkillCategory")
                        .WithMany("ReportSkillLineItems")
                        .HasForeignKey("ReportSkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.SkillLineItem", "SkillLineItem")
                        .WithMany("ReportSkillLineItems")
                        .HasForeignKey("SkillLineItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReportSkillCategory");

                    b.Navigation("SkillLineItem");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ReportSkillSet", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.Report", "Report")
                        .WithMany("SkillSets")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.SkillSet", "SkillSet")
                        .WithMany("ReportSkillSets")
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Session", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.Program", "Program")
                        .WithMany("Sessions")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.SkillCategory", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.SkillSet", "SkillSet")
                        .WithMany("SkillCategories")
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.SkillLineItem", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.SkillCategory", "SkillCategory")
                        .WithMany("SkillLineItems")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Slot", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.TherapistSession", "TherapistSession")
                        .WithMany("Slots")
                        .HasForeignKey("TherapistSessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TherapistSession");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Student", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Therapist", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.AppUser", "AppUser")
                        .WithOne("Therapist")
                        .HasForeignKey("RehabilitationSystem.Models.Therapist", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.TherapistSession", b =>
                {
                    b.HasOne("RehabilitationSystem.Models.Session", "Session")
                        .WithMany("TherapistsSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabilitationSystem.Models.Therapist", "Therapist")
                        .WithMany("TherapistSessions")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Admin", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("CustomerService");

                    b.Navigation("Parent");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Billing", b =>
                {
                    b.Navigation("BillingItems");

                    b.Navigation("ProgramStudent");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Program", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("ProgramStudents");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ProgramStudent", b =>
                {
                    b.Navigation("ProgramStudentSlots");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Report", b =>
                {
                    b.Navigation("SkillSets");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ReportSkillCategory", b =>
                {
                    b.Navigation("ReportSkillLineItems");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.ReportSkillSet", b =>
                {
                    b.Navigation("ReportSkillCategories");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Session", b =>
                {
                    b.Navigation("TherapistsSessions");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.SkillCategory", b =>
                {
                    b.Navigation("ReportSkillCategories");

                    b.Navigation("SkillLineItems");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.SkillLineItem", b =>
                {
                    b.Navigation("ReportSkillLineItems");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.SkillSet", b =>
                {
                    b.Navigation("ReportSkillSets");

                    b.Navigation("SkillCategories");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Slot", b =>
                {
                    b.Navigation("ProgramStudentSlots");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Student", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("ProgramStudents");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.Therapist", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("TherapistSessions");
                });

            modelBuilder.Entity("RehabilitationSystem.Models.TherapistSession", b =>
                {
                    b.Navigation("Slots");
                });
#pragma warning restore 612, 618
        }
    }
}
